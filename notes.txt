-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
>>>>> STEP 11 - BLUEPRINTS AND CONFIGURATION
-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

>>> Blueprints :
_______________________________

(Split up the different application fonctionalities into their own sections)

- Create new package in our application named after the functions it contains
exp : users, posts, main
- Create __init.py__ file in each folder
- Each folder should contain its own routes.py, forms.py, utils.py, if needed

>> ROUTES
- Put the routes in the right package (everything related to users f.ex)
- We don't use the global "app" anymore to define the routes. Change the routes from @app.route() to @users.route()
- Do the same for posts, and main routes

>> FORMS
- Put all the forms related to users in its own "forms.py"

>> IMPORTS
- Put all the imports needed in the right files
- Fix the imports where some changes are needed

>> DELETE old files (forms.py and routes.py)

>> __INIT__.py
- In the flaskblog.__init__.py, change the way routes are imported
- Import Blueprint objects from each of those new packages, and register them :
        from flaskblog.users.routes import users
        app.register_blueprint(users)

- Change all url_for() functions in the project, f.ex :
        url_for('login') ==> url_for('users.login')

- Change this line in __init__.py (page to redirect if unlogged user try to access a page):
        login_manager.login_view = 'login' 
        ==> login_manager.login_view = 'users.login'



>>> Configuration
_______________________________

- Put configuration values of the app into their own file
- Create a Config class
- app.config['NAME'] ==> CONSTANT_NAME
- Put some of these informations in environment variables
        nano ~/.bashrc
        export SECRET_KEY="6023ea02366af26f4d0b13335e6c52d3" 
            #(enlever les espaces avant et après le "=")
- Importer la classe de configuration dans notre app :
        from flaskblog.config import Config
- Après avoir instancié notre app "app = Flask(__name__)", on importe les configurations :
        app.config.from_object(Config)

>>> Application factory : 
_______________________________
(Creation of the app in a function (usefull if we want an app for development and another for production))
Allows to create instances of our application (with different configurations)

- Create function to create the app :
        def create_app(config_class=Config):
- Put creation of the app, config, and blueprints inside this function
- delete "app" word from extensions, exp :
        db = SQLAlchemy(app) => db = SQLAlchemy()
        (...)
- initialize the extensions inside the function :
        db.init_app(app)
- return app at the end of the function
- Replace all the "app" call through the aplication :
        from flaskblog import app
        ==> from flask import current_app


-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
>>>>> STEP 12 - CUSTOM ERROR PAGES
-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

- New Blueprint (errors) : create new folder, and __init__.py
- create handlers.py
- Import and create "errors" Blueprint
- Create "errors routes" with specific decorator :
        @errors.app_errorhandler(404)
        def error404(error):
                return render_template('errors/404.html'), 404
- render template (in subfolder)
- the second returned argument specifies the HTTP code to be returned (otherwise would be 200 ?)
- create the errors templates ("errors/404.html" p.ex)

-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
>>>>> FUTURE FEATURES
-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

- Unit tests
- Deploy on several platforms